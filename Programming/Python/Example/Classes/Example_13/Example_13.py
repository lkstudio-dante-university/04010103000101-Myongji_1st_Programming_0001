import os
import sys

from Example.Classes.Example_13.Example_13_01 import *
from Example.Classes.Example_13.Example_13_02 import *

"""
Python 메서드 구현 방법
- def + 메서드 이름 + 매개 변수 + 메서드 몸체

Python 메서드 호출 방법
- 메서드 이름 + ( ) (메서드 호출 연산자)

메서드 내부에 구현 된 메서드를 실행하기 위해서는 해당 메서드를 호출 (실행) 해줘야한다. (즉, 메서드를 호출하지 않으면 해당 메서드에 명시 된
명령문이 동작하지 않는다는 것을 알 수 있다.)

Ex)
def SomeMethodA():
	# 메서드 몸체
	
def SomeMethodB(a_nLhs, a_nRhs):
	# 메서드 몸체

SomeMethodA()
SomeMethodB(10, 20)

매개 변수란?
- 메서드가 호출 (실행) 될 때 입력으로 전달 된 데이터를 저장하는 변수를 의미한다. (즉, 매개 변수는 일반적인 변수처럼 데이터를 저장하거나
읽어들일 수 있는 공간을 의미한다.)

호출하고자하는 메서드에 입력 데이터 (매개 변수) 가 존재 할 경우 반드시 매개 변수 개수만큼 데이터를 전달 할 필요가 있다.

메서드 몸체란?
- 메서드가 실제로 처리 할 명령문을 의미한다. (즉, 메서드 몸체는 특정 메서드 하위 영역에 위치하기 떄문에 반드시 들여쓰기를 통해 특정 메서드
영역 하위에 위치해있다는 것을 Python 인터프리터에게 알려 줄 필요가 있다.)

Python 메서드 유형
- 입력 O, 출력 O
- 입력 O, 출력 X
- 입력 X, 출력 O
- 입력 X, 출력 X

Python 의 메서드는 입/출력 값의 유/무에 따라 크게 4 가지 유형으로 나뉜다는 것을 알 수 있다.

모듈화 프로그래밍이란?
- 명령문을 기능 별로 나누어 관리함으로서 관리에 대한 효율성을 높히는 방법을 의미한다. (즉, 하나의 파일에 많은 명령문이 존재 할 경우 해당 파일을
관리하는 것이 상대적으로 어려워진다는 것을 알 수 있다.)

모듈이라는 것은 프로그램을 구성하는 명령문 중 일부분을 의미하며 해당 모듈을 조합함으로서 프로그램을 완성하는 것이 모듈화 프로그래밍이다.
프로그래밍에서 모듈은 특정 메서드가 될 수도 있고 관련 명령문을 모아놓은 파일이 될 수도 있다. (즉, 모듈이라는 것은 기능을 얼마나 세부적으로
분할하는지에 따라 범위가 결정된다는 것을 알 수 있다.)

Python 에서 모듈은 일반적으로 파일을 의미하기 때문에 특정 모듈을 사용한다는 것은 파일에 존재하는 여러 기능을 사용한다는 의미가 된다.
또한, Python 은 패키지를 지원하며 패키지는 여러 모듈을 다시 하나의 단위로 묶어주는 개념을 의미한다.

Ex)
패키지 1
	- 모듈 1
		- 기능 1 (메서드, 클래스 등등...)
		- 기능 2
		- 등등...
	- 모듈 2
	- 등등...
패키지 2
	- 모듈 1
	- 모듈 2
	- 등등...
	
위와 같이 패키지 하위에는 여러 모듈이 존재하기 때문에 패키지는 기능을 분류하는 가장 최상위의 단위라는 것을 알 수 있다.
"""


# Example 13
def Example_13(args):
	Example_13_01(args)
	Example_13_02(args)
